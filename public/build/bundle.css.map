{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Route.svelte",
    "Router.svelte",
    "App.svelte",
    "Home.svelte",
    "Create.svelte",
    "New.svelte",
    "Views.svelte"
  ],
  "sourcesContent": [
    "<script context=\"module\">\n  import { writable } from 'svelte/store';\n  import { routeInfo } from './router';\n  import {\n    CTX_ROUTER, CTX_ROUTE, getProps, isPromise, isSvelteComponent,\n  } from './utils';\n</script>\n\n<script>\n  import { onDestroy, getContext, setContext } from 'svelte';\n\n  export let key = null;\n  export let path = '/';\n  export let exact = null;\n  export let pending = null;\n  export let disabled = false;\n  export let fallback = null;\n  export let component = null;\n  export let condition = null;\n  export let redirect = null;\n\n  // replacement for `Object.keys(arguments[0].$$.props)`\n  const thisProps = ['key', 'path', 'exact', 'pending', 'disabled', 'fallback', 'component', 'condition', 'redirect'];\n\n  const routeContext = getContext(CTX_ROUTE);\n  const routerContext = getContext(CTX_ROUTER);\n\n  const { assignRoute, unassignRoute } = routerContext || {};\n\n  const routePath = routeContext ? routeContext.routePath : writable(path);\n\n  let activeRouter = null;\n  let activeProps = {};\n  let fullpath;\n  let failure;\n  let hasLoaded;\n\n  const fixedRoot = $routePath !== path && $routePath !== '/'\n    ? `${$routePath}${path !== '/' ? path : ''}`\n    : path;\n\n  try {\n    if (redirect !== null && !/^(?:\\w+:\\/\\/|\\/)/.test(redirect)) {\n      throw new TypeError(`Expecting valid URL to redirect, given '${redirect}'`);\n    }\n\n    if (condition !== null && typeof condition !== 'function') {\n      throw new TypeError(`Expecting condition to be a function, given '${condition}'`);\n    }\n\n    if (path.charAt() !== '#' && path.charAt() !== '/') {\n      throw new TypeError(`Expecting a leading slash or hash, given '${path}'`);\n    }\n\n    if (!assignRoute) {\n      throw new TypeError(`Missing top-level <Router>, given route: ${path}`);\n    }\n\n    const fixedRoute = path !== fixedRoot && fixedRoot.substr(-1) !== '/'\n      ? `${fixedRoot}/`\n      : fixedRoot;\n\n    [key, fullpath] = assignRoute(key, fixedRoute, {\n      condition, redirect, fallback, exact,\n    });\n  } catch (e) {\n    failure = e;\n  }\n\n  $: if (key) {\n    activeRouter = !disabled && $routeInfo[key];\n    activeProps = getProps($$props, thisProps);\n  }\n\n  $: if (activeRouter) {\n    if (!component) { // component passed as slot\n      hasLoaded = true;\n    } else if (isSvelteComponent(component)) { // component passed as Svelte component\n      hasLoaded = true;\n    } else if (isPromise(component)) { // component passed as import()\n      component.then(module => {\n        component = module.default;\n        hasLoaded = true;\n      });\n    } else { // component passed as () => import()\n      component().then(module => {\n        component = module.default;\n        hasLoaded = true;\n      });\n    }\n  }\n\n  onDestroy(() => {\n    if (unassignRoute) {\n      unassignRoute(fullpath);\n    }\n  });\n\n  setContext(CTX_ROUTE, {\n    routePath,\n  });\n</script>\n\n<style>\n  [data-failure] {\n    color: red;\n  }\n</style>\n\n{#if failure}\n  <p data-failure>{failure}</p>\n{/if}\n\n{#if activeRouter}\n  {#if !hasLoaded}\n    {#if pending}\n      {#if isSvelteComponent(pending)}\n        <svelte:component this={pending} router={activeRouter} {...activeProps} />\n      {:else}\n        {pending}\n      {/if}\n    {/if}\n  {:else}\n    {#if component}\n      <svelte:component this={component} router={activeRouter} {...activeProps} />\n    {:else}\n      <slot router={activeRouter} props={activeProps} />\n    {/if}\n  {/if}\n{/if}\n",
    "<script context=\"module\">\n  import { writable } from 'svelte/store';\n  import { CTX_ROUTER, router } from './utils';\n  import {\n    baseRouter, addRouter, findRoutes, doFallback,\n  } from './router';\n</script>\n\n<script>\n  import {\n    onMount, onDestroy, getContext, setContext,\n  } from 'svelte';\n\n  let cleanup;\n  let failure;\n  let fallback;\n\n  export let path = '/';\n  export let disabled = false;\n  export let condition = null;\n  export let nofallback = false;\n\n  const routerContext = getContext(CTX_ROUTER);\n  const basePath = routerContext ? routerContext.basePath : writable(path);\n\n  const fixedRoot = $basePath !== path && $basePath !== '/'\n    ? `${$basePath}${path !== '/' ? path : ''}`\n    : path;\n\n  try {\n    if (condition !== null && typeof condition !== 'function') {\n      throw new TypeError(`Expecting condition to be a function, given '${condition}'`);\n    }\n\n    if (path.charAt() !== '#' && path.charAt() !== '/') {\n      throw new TypeError(`Expecting a leading slash or hash, given '${path}'`);\n    }\n  } catch (e) {\n    failure = e;\n  }\n\n  function assignRoute(key, route, detail) {\n    key = key || Math.random().toString(36).substr(2);\n\n    // consider as nested routes if they does not have any segment\n    const nested = !route.substr(1).includes('/');\n    const handler = { key, nested, ...detail };\n\n    let fullpath;\n\n    baseRouter.mount(fixedRoot, () => {\n      fullpath = baseRouter.add(route, handler);\n      fallback = (handler.fallback && key) || fallback;\n    });\n\n    findRoutes();\n\n    return [key, fullpath];\n  }\n\n  function unassignRoute(route) {\n    try {\n      baseRouter.rm(route);\n    } catch (e) {\n      // ðŸ”¥ this is fine...\n    }\n    findRoutes();\n  }\n\n  function onError(err) {\n    failure = err;\n\n    if (failure && fallback) {\n      doFallback(failure, fallback);\n    }\n  }\n\n  onMount(() => {\n    cleanup = addRouter(fixedRoot, fallback, onError);\n  });\n\n  onDestroy(() => {\n    if (cleanup) cleanup();\n  });\n\n  setContext(CTX_ROUTER, {\n    basePath,\n    assignRoute,\n    unassignRoute,\n  });\n\n  $: if (condition) {\n    disabled = !condition($router);\n  }\n</script>\n\n<style>\n  [data-failure] {\n    border: 1px dashed silver;\n  }\n</style>\n\n{#if !disabled}\n  <slot />\n{/if}\n\n{#if failure && !fallback && !nofallback}\n  <fieldset data-failure>\n    <legend>Router failure: {path}</legend>\n    <pre>{failure}</pre>\n  </fieldset>\n{/if}\n",
    "<script>\n\timport { FirebaseApp, User, Doc, Collection } from \"sveltefire\";\n\timport firebase from \"firebase/app\";\n\timport \"firebase/firestore\";\n\timport \"firebase/auth\";\n\t  // Your web app's Firebase configuration\n\tvar firebaseConfig = {\n\t\tapiKey: \"AIzaSyAuom8AD1lt1W5AGnnJj8yedgwb7UV_C2c\",\n\t\tauthDomain: \"test-app-5025d.firebaseapp.com\",\n\t\tdatabaseURL: \"https://test-app-5025d.firebaseio.com\",\n\t\tprojectId: \"test-app-5025d\",\n\t\tstorageBucket: \"test-app-5025d.appspot.com\",\n\t\tmessagingSenderId: \"831965365779\",\n\t\tappId: \"1:831965365779:web:5016e345b71133566e61e6\",\n\t\tmeasurementId: \"G-PZ1B8M9X5N\"\n\t};\n\t// Initialize Firebase\n\tfirebase.initializeApp(firebaseConfig);\n\n\t//almost lov\n\timport { Router, Route, Link } from 'yrv';\n\timport home from \"./Home.svelte\";\n\timport create from \"./component/Create.svelte\";\n\timport sha512 from 'crypto-js/sha512';\n\n</script>\n\t<style>\n\t\tmain {\n\t\t\ttext-align: center;\n\t\t\tpadding: 1em;\n\t\t\tmax-width: 240px;\n\t\t\tmargin: 0 auto;\n\t\t}\n\n\t\t@media (min-width: 640px) {\n\t\t\tmain {\n\t\t\t\tmax-width: none;\n\t\t\t}\n\t\t}\n\t</style>\n<main>\n\n  <Router>\n      <Route path=\"/\" exact component={home}/>\n\t  <Route exact path=\"/{sha512('create')}\" component={create}/><!-- wtf - Porque? Para Que?  -->\n  </Router> \n\n</main>\n",
    "<script>\r\n\r\n\t//I love moment\r\n\timport moment from 'moment';\r\n\tlet _date = moment().format('dddd Do [de] MMMM [del] YYYY');\r\n\timport 'moment/locale/es';\r\n\timport { onMount } from 'svelte';\r\n\tlet time = new Date();\r\n\r\n\t$: hours = time.getHours();\r\n\t$: minutes = time.getMinutes();\r\n\t$: seconds = time.getSeconds();\r\n\r\n\tonMount(() => {\r\n\t\tconst interval = setInterval(() => {\r\n\t\t\ttime = new Date();\r\n\t\t}, 1000);\r\n\r\n\t\treturn () => {\r\n\t\t\tclearInterval(interval);\r\n\t\t};\r\n\t});\r\n\r\n\t//Routes\r\n\timport { Link } from 'yrv';\r\n\timport sha512 from 'crypto-js/sha512';\r\n\r\n</script>\r\n\t<style>\r\n\t\th1 {\r\n\t\t\tcolor: #ff3e00;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t\tfont-size: 4em;\r\n\t\t\tfont-weight: 100;\r\n\t\t}\r\n\t</style>\r\n<svelte:head>\r\n<title>Home</title>\r\n</svelte:head>\r\n\r\n\r\n<!-- Body -->\r\n\t<h1>{_date} {hours}:{minutes<=9?\"0\"+minutes:minutes}:{seconds<=9?\"0\"+seconds:seconds}</h1>\r\n\t<p>Hola si eres profesor, debes crear tu examen.</p>\r\n\t<Link href=\"/{sha512('create')}\"><button> Crear nuevo examen</button></Link>\r\n\r\n\t<p>Hola alumno, coloca el codigo de examen que te dio tu profesor.</p>\r\n\t<input type=\"text\">\r\n\t<button >Tomar mi examen</button>\r\n\r\n\t",
    "<script>\r\nimport { FirebaseApp, User, Doc, Collection } from \"sveltefire\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport { Router, Route, Link } from 'yrv';\r\nimport createx from \"./Create.svelte\";\r\nimport newx from \"./New.svelte\";\r\nimport viewx from \"./Views.svelte\";\r\n\r\nconst menueitem = [\r\n    { component: newx},\r\n    { component: viewx},\r\n  ]\r\n\r\n  let menuselected = menueitem[0];\r\n\r\n</script>\r\n    <svelte:head>\r\n        <title>Home</title>\r\n    </svelte:head>\r\n    <style>\r\n\t\th3 {\r\n\t\t\tcolor: #ff3e00;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t}\r\n\t</style>\r\n    <!-- Body -->\r\n    <h3>Examenes</h3>\r\n\t Nuevo examen | Mis examenes | Salir | \t<Link href=\"/\">Home</Link>\r\n\r\n    <svelte:component this={menuselected.component}/>\r\n",
    "<script>\r\nimport { FirebaseApp, User, Doc, Collection } from \"sveltefire\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport { Router, Route, Link } from 'yrv';\r\n\r\n\r\n</script>\r\n    <svelte:head>\r\n        <title>Crear Examenes</title>\r\n    </svelte:head>\r\n    <style>\r\n\t\th3 {\r\n\t\t\tcolor: #ff3e00;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t}\r\n\t</style>\r\n    <!-- Body -->\r\n    <h3>Crear nuevo Examen </h3>\r\n\r\n\r\n<FirebaseApp firebase={firebase}>\r\n\r\n\r\n\r\n\r\n\r\n</FirebaseApp>",
    "<script>\r\nimport { FirebaseApp, User, Doc, Collection } from \"sveltefire\";\r\nimport firebase from \"firebase/app\";\r\n\r\nimport { Router, Route, Link } from 'yrv';\r\n\r\n\r\n</script>\r\n    <svelte:head>\r\n        <title>Mis Examenes</title>\r\n    </svelte:head>\r\n    <style>\r\n\t\th3 {\r\n\t\t\tcolor: #ff3e00;\r\n\t\t\ttext-transform: uppercase;\r\n\t\t}\r\n\t</style>\r\n    <!-- Body -->\r\n    <h3>Mis Examenes </h3>\r\n\r\n\r\n<FirebaseApp firebase={firebase}>\r\n    <!-- default slot -->\r\n\r\n\t<Collection \r\n    path={'examenes'} \r\n    log\r\n    on:data\r\n    on:ref\r\n\t>\r\n    <div slot=\"loading\">Loading...</div>\r\n\r\n\r\n\r\n    <div slot=\"fallback\">\r\n        Unable to display data...\r\n    </div>\r\n\r\n</Collection>\r\n</FirebaseApp>"
  ],
  "names": [],
  "mappings": "AAwGE,CAAC,YAAY,CAAC,cAAC,CAAC,AACd,KAAK,CAAE,GAAG,AACZ,CAAC;ACTD,CAAC,YAAY,CAAC,cAAC,CAAC,AACd,MAAM,CAAE,GAAG,CAAC,MAAM,CAAC,MAAM,AAC3B,CAAC;ACxED,IAAI,eAAC,CAAC,AACL,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAC1B,IAAI,eAAC,CAAC,AACL,SAAS,CAAE,IAAI,AAChB,CAAC,AACF,CAAC;ACTD,EAAE,eAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,GAAG,CACd,WAAW,CAAE,GAAG,AACjB,CAAC;ACbD,EAAE,aAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,AAC1B,CAAC;ACZD,EAAE,aAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,AAC1B,CAAC;ACHD,EAAE,aAAC,CAAC,AACH,KAAK,CAAE,OAAO,CACd,cAAc,CAAE,SAAS,AAC1B,CAAC"
}